" DEFAULT --------------------------------------------------------------------
" ----------------------------------------------------------------------------
set number
set t_CO=256
set tabstop=4 
set softtabstop=0 
set expandtab 
set shiftwidth=4 
set smarttab
set ls=2
set nocompatible
set backspace=2
set clipboard=unnamedplus
set encoding=UTF-8
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
filetype off
let python_highlight_all=1
syntax on
" VUNDLE ------------------------------------------------------------
" -------------------------------------------------------------------
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
" PLUGINS

" Nav
Plugin 'ctrlpvim/ctrlp.vim'

" Syntax
Plugin 'sheerun/vim-polyglot'
Plugin 'w0rp/ale'

" Appearance
Plugin 'flazz/vim-colorschemes'             " Colorscheme manager
Plugin 'joshdick/onedark.vim'               " Colorscheme
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Code formatting
Plugin 'prettier/vim-prettier', {
  \ 'for': [
    \ 'javascript',
    \ 'typescript',
    \ 'css',
    \ 'less',
    \ 'scss',
    \ 'json',
    \ 'graphql',
    \ 'markdown',
    \ 'vue',
    \ 'python',
    \ 'html' ] }

" Code completion
Plugin 'Valloric/YouCompleteMe'
Plugin 'jiangmiao/auto-pairs'               " Auto pair insert
Plugin 'alvan/vim-closetag'                 " Auto close tags

" Snippets
Plugin 'SirVer/ultisnips'                   " engine
Plugin 'honza/vim-snippets'

" Misc
Plugin 'tpope/vim-fugitive'                 " Git wrapper
Plugin 'ervandew/supertab'                  " For YCM and Ultisnips compat
Plugin 'chrisbra/Colorizer'                 " hex colors

" /PLUGINS
call vundle#end()
filetype indent plugin on


" ALE ---------------------------------------------------------------
" -------------------------------------------------------------------
let g:ale_fixers = {
  \ 'javascript': ['eslint']
\}
let g:ale_sign_error = 'x'
let g:ale_sign_warning = 'w'
let g:ale_fix_on_save = 1

" YCM ---------------------------------------------------------------
" make YCM compatible with UltiSnips (using supertab) ---------------
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'


" ULTISNIPS ---------------------------------------------------------
" better key bindings for UltiSnipsExpandTrigger --------------------
let g:UltiSnipsExpandTrigger="<cr>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"


" VIM PRETTIER ------------------------------------------------------
" -------------------------------------------------------------------
imap <Leader>p <Esc>:Prettier<CR>


" CTRLP -------------------------------------------------------------
" -------------------------------------------------------------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,node_modules/*
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
  \ }


" VIM-COLORSCHEME ---------------------------------------------------
" -------------------------------------------------------------------
colorscheme onedark


" VIM-CLOSETAG ------------------------------------------------------
" -------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.js"


" VIM PRETTIER ------------------------------------------------------
" -------------------------------------------------------------------
" max line length that prettier will wrap on
" Prettier default: 80
let g:prettier#config#print_width = 120

" number of spaces per indentation level
" Prettier default: 2
let g:prettier#config#tab_width = 2

" use tabs over spaces
" Prettier default: false
let g:prettier#config#use_tabs = 'false'

" print semicolons
" Prettier default: true
let g:prettier#config#semi = 'true'

" single quotes over double quotes
" Prettier default: false
let g:prettier#config#single_quote = 'true'

" print spaces between brackets
" Prettier default: true
let g:prettier#config#bracket_spacing = 'true'

" put > on the last line instead of new line
" Prettier default: false
let g:prettier#config#jsx_bracket_same_line = 'true'

" avoid|always
" Prettier default: avoid
let g:prettier#config#arrow_parens = 'always'

" none|es5|all
" Prettier default: none
let g:prettier#config#trailing_comma = 'all'

" flow|babylon|typescript|css|less|scss|json|graphql|markdown
" Prettier default: babylon
let g:prettier#config#parser = 'flow'

" cli-override|file-override|prefer-file
let g:prettier#config#config_precedence = 'prefer-file'

" always|never|preserve
let g:prettier#config#prose_wrap = 'preserve'

" css|strict|ignore
let g:prettier#config#html_whitespace_sensitivity = 'css'


" VIM-AIRLIN --------------------------------------------------------
" -------------------------------------------------------------------
set laststatus=2
let g:airline_theme='atomic'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = 'EC'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = ' NE'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty = "⚡"

" Key Remaps --------------------------------------------------------
" -------------------------------------------------------------------
" Split view key remap
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" buffer
map <S-J> :bprev<CR>
map <S-K> :bnext<CR>
map <S-q> :bd<CR>
map <S-c> :qa!<CR>

" Save on ctrl s, exit on ctrl c
nmap <c-s> :w<CR>
imap <c-s> <ESC>:w<CR>
map <c-c> :qa!<CR>

" File specific setups ----------------------------------------------
" -------------------------------------------------------------------
au BufNewFile,BufRead *.js,*.html,*.jsx,*.css,*.less
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab | 
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set fileformat=unix

" Scripts -----------------------------------------------------------
" -------------------------------------------------------------------
" Prompt to create a directory if not exist
augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir)
          \   && (a:force
          \       || input("'" . a:dir . "' does not exist. Create? [y/N]") =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END

" Misc --------------------------------------------------------------
" -------------------------------------------------------------------
" Global buffer Visual Mode
set guioptions+=a
