#!/bin/env python3

import sqlite3
from datetime import datetime, timedelta
import argparse


DB_NAME = '/home/risus/.local/sh/eta.db'
DB_DT_F = '%Y-%m-%d %H:%M:%S.%f'


class Cursor():
    def __init__(self):
        self.connection = sqlite3.connect(DB_NAME)
        self.cursor = None

    def __enter__(self):
        self.cursor = self.connection.cursor()
        return self.cursor

    def __exit__(self, *args, **kwargs):
        self.cursor.close()
        self.connection.commit()
        self.connection.close()



def setup():
    with Cursor() as cur:
        cur.execute(
            """
            CREATE TABLE eta(
                id integer PRIMARY KEY AUTOINCREMENT,
                project_slug varchar,
                created_at datetime,
                closed_at datetime
            );
            """
        )


def get(project_slug):
    with Cursor() as cur:
        sql = "SELECT * FROM eta WHERE closed_at IS NULL AND project_slug = ?"
        cur.execute(sql, (project_slug,))
        return cur.fetchall()


def close_eta(project_slug):
    now = datetime.now()
    with Cursor() as cur:
        sql = "UPDATE eta SET closed_at = ? WHERE project_slug = ? AND closed_at IS NULL"
        cur.execute(sql, (now, project_slug))
    return get_spent(project_slug)


def create_eta(project_slug):
    now = datetime.now()
    opened_eta = get(project_slug)
    if opened_eta:
        return False, opened_eta
    with Cursor() as cur:
        sql = "INSERT INTO eta (project_slug, created_at)  VALUES (?, ?)"
        cur.execute(sql, (project_slug, now))
        return True, cur.lastrowid


def get_spent(project_slug):
    with Cursor() as cur:
        sql = 'SELECT created_at, closed_at FROM eta WHERE project_slug = ? AND closed_at IS NOT NULL'
        cur.execute(sql, (project_slug,))
        result = cur.fetchall()
    spent = None
    for r in result:
        created_at = datetime.strptime(r[0], DB_DT_F)
        closed_at = datetime.strptime(r[1], DB_DT_F)
        diff = closed_at - created_at
        if spent is None:
            spent = diff
            continue
        spent += diff
    return spent


def inspect(project_slug):
    with Cursor() as cur:
        cur.execute('SELECT * FROM "eta"')
        res = cur.fetchall()
    return res



def destroy(project_slug):
    with Cursor() as cur:
        cur.execute('DELETE FROM eta WHERE project_slug = ?', (project_slug,))


if __name__ == '__main__':
    ACTIONS = {
        'get': get,
        'open': create_eta,
        'close': close_eta,
        'spent': get_spent,
        'setup': setup,
        'inspect': inspect,
        'destroy': destroy
    }

    parser = argparse.ArgumentParser(description='DEMN: dumb eta manager')
    parser.add_argument('p', type=str, help='Project slug')
    parser.add_argument('a', type=str, choices=ACTIONS.keys())
    args = parser.parse_args()
    
    print(ACTIONS[args.a](args.p))

